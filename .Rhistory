plot(1:32,mpg,col=factor(am),pch=19)
legend("topleft",legend=jn,pch=19,col=jn)
legend("topleft",legend=levels(jn),pch=19,col=jn)
legend("topleft",legend=levels(jn),pch=19,col=levels(jn))
plot(1:32,mpg,col=factor(am),pch=19)
legend("topleft",legend=levels(jn),pch=19,col=levels(jn))
levels(jn)
plot(1:32,mpg,col=factor(am),pch=19)
legend("topleft",legend=levels(jn),pch=19,col=c(1,2))
plot(1:32,mpg,col=factor(am),pch=19)
legend("topleft",legend=levels(am),pch=19,col=c(1,2))
legend("topleft",legend=levels(factor(am)),pch=19,col=c(1,2))
library(MASS)
attach(shuttle)
fit <- glm(auto~wind,family="binomial")
data(shuttle)
str(shuttle)
fit <- glm(use~wind,data=shuttle,family="binomial")
summary(fit)
fit2 <- glm(I(1-use)~wind,data=shuttle,family="binomial")
jn <- 1-shuttle$use
unclass(shuttle$use)
?relevel
jn<-relevel(shuttle$use,"noauto")
unclass(shuttle$use)
unclass(jn)
fit2 <- glm(jn~wind,data=shuttle,family="binomial")
summary(fit2)
summary(fit)
fit3 <- glm(use~wind+magn,data=shuttle,family="binomial")
summary(fit3)
str(shuttle)
data(InsectSprays)
str(InsectSprays)
poi <- glm(count~spray,data=InsectSprays,family="poisson")
summary(poi)
summary(fit2)
summary(fit3)
str(shuttle)
summary(fit3)
summary(poi)
summary(fit)
windjn <- relevel(wind,"head")
fit <- glm(use~windjn,data=shuttle,family="binomial")
summary(fit)
windjn
unclass(windjn)
windjn <- relevel(wind,"tail")
fit <- glm(use~windjn,data=shuttle,family="binomial")
summary(fit)
fit2 <- glm(use~windjn+magn,data=shuttle,family="binomial")
summary(fit2)
str(InsectSprays)
sprayjn <- relevel(spray,"B")
sprayjn <- relevel(InsectSprays$spray,"B")
poi <- glm(count~sprayjn,data=InsectSprays,family="poisson")
summary(poi)
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
?offset
help(offset)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
spline <- c(0,0,0,0,0,0,1,2,3,4,5)
fit <- lm(y~x+spline)
summary(fit)
fit <- glm(use~magn,data=shuttle,family="binomial")
resid(fit)
res <- resid(fit)
fit <- glm(use~windjn,data=shuttle,family="binomial")
summary(fit)
shuttle$use
shuttle$use=="auto"
usejn<-1*shuttle$use=="auto"
length(shuttle$use)
usejn<-rep(0,256)
usejn[shuttle$use=="auto"]<-1
usejn
fit <- glm(usejn<-windjn+shuttle$magn,family="binomial")
fit <- glm(usejn~windjn+shuttle$magn,family="binomial")
windjn
shuttle$magn
fit <- glm(usejn~windjn+shuttle$magn,family="binomial")
windjn
fit <- glm(usejn~windjn+magn,data=shuttle,family="binomial")
fit <- glm(use~wind+magn,data=shuttle,family="binomial")
fit <- glm(usejn~wind+magn,data=shuttle,family="binomial")
use
usejn<-relevel(shuttle$use,"noauto")
fit <- glm(usejn<-windjn+shuttle$magn,family="binomial")
usejn
shuttle$use
relevel(shuttle$use,"noauto")
usejn<-relevel(shuttle$use,"noauto")
fit <- glm(usejn<-windjn+shuttle$magn,family="binomial")
fit <- glm(usejn~windjn+shuttle$magn,family="binomial")
usejn
usejn<-relevel(shuttle$use,"noauto")
fit <- glm(usejn~windjn+shuttle$magn,family="binomial")
summary(fit)
fit <- glm(usejn~windjn,family="binomial")
summary(fit)
fit <- glm(usejn~windjn+shuttle$magn,family="binomial")
summary(fit)
fit <- glm(count~spray,data=InsectSprays,family="poisson")
summary(fit)
exp(2.67415)/exp(2.67415+0.05588)
usejn
fit <- glm(usejn~wind,data=shuttle,family="binomial")
summary(fit)
exp(0.25131)/exp(0.25131+0.03181)
fit <- glm(usejn~wind+magn,data=shuttle,family="binomial")
summary(fit)
exp(0.3635)/exp(0.3635+0.13201)
fit <- glm(usejn~wind,data=shuttle,family="binomial")
summary(fit)
fit <- glm(usejn~wind,offset=log(2),data=shuttle,family="binomial")
fit <- glm(usejn~wind,offset=log(rep(2,length(usejn))),data=shuttle,family="binomial")
summary(fit)
fit <- glm(usejn~wind,offset=log(rep(20,length(usejn))),data=shuttle,family="binomial")
summary(fit)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(caret)
install.packages(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
str(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
plot(training$Cement,training$CompressiveStrength)
numrow(training)
nrow(training)
plot(1:nrow(training),training$CompressiveStrength)
?cut2
library(Hmisc)
install.packages("Hmisc")
?cut2
library(Hmisc)
?cut2
str(training)
a<-cut2(training$Cement,g=3)
b<-cut2(training$BlastFurnaceSlag,g=3)
c<-cut2(training$FlyAsh,g=3)
c<-cut2(training$Water,g=3)
b<-cut2(training$BlastFurnaceSlag,g=3)
c<-cut2(training$FlyAsh,g=3)
d<-cut2(training$FlyAsh,g=3)
c<-cut2(training$FlyAsh,g=3)
d<-cut2(training$Water,g=3)
e<-cut2(training$Superplasticizer,g=3)
f<-cut2(training$CoarseAggregate,g=3)
g<-cut2(training$Age,g=3)
plot(1:nrow(training),training$CompressiveStrength)
plot(1:nrow(training),training$CompressiveStrength,col=a)
plot(1:nrow(training),training$CompressiveStrength,col=b)
plot(1:nrow(training),training$CompressiveStrength,col=c)
plot(1:nrow(training),training$CompressiveStrength,col=d)
plot(1:nrow(training),training$CompressiveStrength,col=e)
plot(1:nrow(training),training$CompressiveStrength,col=f)
plot(1:nrow(training),training$CompressiveStrength,col=g)
hist(training$Superplasticizer)
sum(training$Superplasticizer==0)
sum(training$Superplasticizer<0)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
?sub
?gsub
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
gsub("^(IL)",names(training))
gsub("^(IL)",x=names(training))
names(training[,58:69])
?preProcess
preProcess(training[,58:69],method="pca")
jn <-preProcess(training[,58:69],method="pca")
str(jn)
jn <- svd(training[,58:69])
plot(jn$d^2/sum(jn$d^2))
jn <- svd(scale(training[,58:69]))
plot(jn$d^2/sum(jn$d^2))
jn$d^2/sum(jn$d^2)
sigma <-jn$d^2/sum(jn$d^2)
sigma[1]+sigma[2]+sigma[3]+sigma[4]+sigma[5]+sigma[6]+sigma[7]
sigma[1]+sigma[2]+sigma[3]+sigma[4]+sigma[5]+sigma[6]
sub <- as.matrix(training[,58:69])%*%jn$v[,1:7]
summary(training$Diagnosis)
summary(training$diagnosis)
class(training$diagnosis)
pca <- preProcess(training[,58:69],method="pca")
?train
fit1<-train(diagnosis~training[58:69],preProcess="pca",method="glm")
fit1<-train(training$diagnosis~training[58:69],preProcess="pca",method="glm")
names(training[,58:69])
preProc <- preProcess(training[,58:69],method="pca",pcaComp=7)
trainPC <- predict(preProc,training[,58:69])
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
library(e1071)
installed.packages("e1071")
install.packages("e1071")
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
str(modelFit)
testPC <- predict(preProc,testing[58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
fit2<- train(training$diagnosis~.,method="glm",data=training[,58:69])
predict(fit2,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(fit2,testing[,58:69]))
sigma
sigma[1]+sigma[2]+sigma[3]+sigma[4]+sigma[5]+sigma[6]+sigma[7]+sigma[8]+sigma[9]
sigma[1]+sigma[2]+sigma[3]+sigma[4]+sigma[5]+sigma[6]+sigma[7]+sigma[8]
?createDataPartition
preProcess
?preProcess
jn <- preProcess(training[,58:69],method="pca")
str(jn)
print(jn)
jn <- preProcess(training[,58:69],method="pca",thresh=0.80)
print(jn)
df <- read.csv("~/Downloads/LoanStats3a.csv", h=T, stringsAsFactors=F, skip=1)
#take a peak...
head(df)
read.csv("~/Downloads/LoanStats3a.csv", h=T, stringsAsFactors=F, skip=1)
data(Heart)
install.packages("ISLR")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
ls()
str(segmentationOriginal)
ls()
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
?train
training <- segmentationOriginal[segmentationOriginal$Case=="Train",-1]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",-1]
set.seed(125)
model <- train(Class~.,data=training,method="rpart")
plot(model)
str(model)
str(model$finalModel)
plot(model$finalModel,uniform=T)
text(model$finalModel,use.n=T,all=T,cex=0.8)
install.packages("rattle")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive<-olive[,-1]
str(olive)
model <- train(Area~.,data=olive,method="rpart")
plot(model$finalModel,uniform=T)
text(model$finalModel,use.n=T,all=T,cex=0.8)
newdata = as.data.frame(t(colMeans(olive)))
predict(model,newdata)
table(olive$Area)
library(ElemStatLearn)
data(SAheart)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAheart)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=SAheart,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(SAheart$chd,predict(model,SAheart))
missClass(SAheart$chd,predict(model,SAheart))
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass(trainSA$chd,predict(model,trainSA))
missClass(testSA$chd,predict(model,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
model <- train(y~.,data=vowel.train,method="rf")
?varImp
varImp(model)
set.seed(33833)
model <- train(y~.,data=vowel.train,method="rf")
varImp(model)
?importance
importance(model,type=2)
class(model)
set.seed(33833)
model <- train(y~.,data=vowel.train,method="rf",importance=T)
varImp(model)
input4<-read.table(file="./White Space funnel _ EMEA Q1_Q2.txt",header=TRUE,sep=",")
setwd("C:/Users/orojuan/Documents/GLA/FY14/Pipeline/Whitespace")
input4<-read.table(file="./White Space funnel _ EMEA Q1_Q2.txt",header=TRUE,sep=",")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",quote="")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt")
?read.csv
input4
input4[,1:5]
input4[,1:3]
input4 <- read.csv(file="./White Space funnel _ APJ Q3_Q4.txt")
colnames(input4) <- headers
headers <- c("Account","AMID4","AMID4.Name","AMID2","AMID2.Name","ID","Oppty.Name","Oppty.Desc","Type","Geography","Status","Stage","Close.Qtr","Ship.Qtr","BG","GBU","Sub.GBU","BA.Code","BA.Name","SubPL.ID","SubPL.Name","Value","Total")
input4 <- read.csv(file="./White Space funnel _ APJ Q3_Q4.txt")
input4[,1:3]
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt")
colnames(input5) <- headers
input5[,1:3]
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt")
setwd("C:/Users/orojuan/Documents")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt")
input5[nrow(input5),1:3]
?read.csv
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",encoding="UTF-8")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",encoding="latin1")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",encoding="UTF-8")
?read.csv
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",fileEncoding="UTF-8")
getwd()
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",fileEncoding="UTF-8")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",fileEncoding="Unicode")
input5 <- read.csv(file="./White Space funnel _ EMEA Q1_Q2.txt",fileEncoding="GBX")
library(caret)
library(shiny)
setwd("C:/Users/orojuan/Documents/Data Science/data product")
dataset <- read.csv("./credit.csv",comment.char="",colClasses=c("factor","numeric","numeric","factor","numeric","numeric","numeric","factor","factor"))
str(dataset)
set.seed(34843)
ctrl <- trainControl(method ="cv", number=10)
model <- train(class~.,data=dataset,method="rf",trControl=ctrl)
rfAcc <- sum(model$resample$Accuracy)/10
?numericInput
mean(dataset$credit.len)
hist(dataset$credit.len)
max(dataset$credit.len)
table(dataset$credit.len)
mean(dataset$credit.amount)
summary(dataset$credit.amount)
levels(dataset$save.acc)
table(dataset$debt.rat)
table(dataset$residence)
summary(dataset$age)
levels(dataset$other.installment)
output$oid1 <- renderPrint({input$id1})
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?goButton
?submitButton
?save
save(model,file="./randomforest.RData")
?load
predict(model,dataset[1,-ncol(dataset)])
save(model,rfAcc,file="./randomforest.RData")
runApp()
?data.frame
data.frame(x=1,y=2)
dataset[1,-1]
dataset[1,-ncol(dataset)]
predict(model,data.frame(chk.acc="(-inf,0)",
credit.len=6,credit.amount=1169,save.acc="No acc",
debt.rate=4,residence=4,age=67,other.installment="None"))
runApp()
levels(dataset$save.acc)
table(dataset$save.acc)
rm(model)
runApp()
runApp()
installed.packages()
rownames(installed.packages())
"caret" %in% rownames(installed.packages())
!"caret" %in% rownames(installed.packages())
runApp()
setwd("C:/Users/orojuan/Documents/Data Science/data product")
library(caret)
dataset <- read.table("./credit.txt",comment.char="",header=F,
colClasses=c("factor","numeric","factor","factor","numeric",
"factor","factor","numeric","factor","factor",
"numeric","factor","numeric","factor","factor","factor"))
"numeric","factor","numeric","factor","factor",
colnames(dataset) <- c("chk.acc","credit.len","credit.hist","credit.purpose","credit.amount",
"save.acc","seniority","debt.rate","marital.gender","debtor.guarantor",
"credits.inbank","job","dependents","telephone","foreign","class")
"residence","property","age","other.installment","housing",
dataset <- read.table("./credit.txt",comment.char="",header=F,
colClasses=c("factor","numeric","factor","factor","numeric",
"factor","factor","numeric","factor","factor",
"numeric","factor","numeric","factor","factor",
"numeric","factor","numeric","factor","factor","factor"))
colnames(dataset) <- c("chk.acc","credit.len","credit.hist","credit.purpose","credit.amount",
"save.acc","seniority","debt.rate","marital.gender","debtor.guarantor",
"residence","property","age","other.installment","housing",
"credits.inbank","job","dependents","telephone","foreign","class")
dataset$class <- factor(dataset$class,labels=c("Good","Bad"))
dataset$gender <- ifelse(dataset$marital.gender %in% c("A91","A93","A94"),"M","F")
dataset$marital <- ifelse(dataset$marital.gender %in% c("A93","A95"),"Single","Other")
head(dataset[,c(1,2,5,6,13,14,21,22,23)])
jn <- train(class~.,data=dataset[,c(1,2,5,6,13,14,21,22,23)],method="rf",trControl=ctrl)
jnAcc <- sum(jn$resample$Accuracy)/10
jn
dataset <- read.table("./credit.txt",comment.char="",header=F,
colClasses=c("factor","numeric","factor","factor","numeric",
"factor","factor","factor","factor","factor",
"factor","factor","numeric","factor","factor",
"numeric","factor","numeric","factor","factor","factor"))
colnames(dataset) <- c("chk.acc","credit.len","credit.hist","credit.purpose","credit.amount",
"save.acc","seniority","debt.rate","marital.gender","debtor.guarantor",
"residence","property","age","other.installment","housing",
"credits.inbank","job","dependents","telephone","foreign","class")
dataset$class <- factor(dataset$class,labels=c("Good","Bad"))
model <- train(class~.,data=dataset,method="rf",trControl=ctrl)
rfAcc <- sum(model$resample$Accuracy)/10
names(dataset[,c(1,2,5,11,6,8,13,14)])
names(dataset[,c(1,2,5,6,13,14,21,22,23)])
names(dataset[,c(1,2,5,6,13,14,21,22,23)])
names(dataset[,c(1,2,5,6,13,14,21)])
head(dataset[,c(1,2,5,6,13,14,21)])
rm(dataset)
rm(ctrl)
rm(jn)
rm(jnAcc)
rm(model)
rm(rfAcc)
setwd("C:/Users/orojuan/Documents/Data Science/data product")
dataset <- read.csv("./credit.csv",comment.char="",colClasses=c("factor","numeric","numeric","factor","factor","factor","numeric","factor","factor"))
set.seed(34843)
ctrl <- trainControl(method ="cv", number=10)
model <- train(class~.,data=dataset,method="rf",trControl=ctrl)
rfAcc <- sum(model$resample$Accuracy)/10
save(model,rfAcc,file="./randomforest.RData")
names(dataset)
levels(dataset$marital)
runApp()
runApp()
runApp()
runApp()
names(dataset)
runApp()
dataset <- read.csv("./credit.csv",comment.char="",colClasses=c("factor","numeric","numeric","factor","factor","factor","numeric","factor","factor"))
set.seed(34843)
ctrl <- trainControl(method ="cv", number=10)
model <- train(class~.,data=dataset,method="rf",trControl=ctrl)
rfAcc <- sum(model$resample$Accuracy)/10
names(dataset)
levels(dataset$gender)
levels(dataset$marital)
save(model,rfAcc,file="./randomforest.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
